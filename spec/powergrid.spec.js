var powergrid = require('../powergrid.umd');


var config = {
	name: 'Power Grid',
	version: '0.1.0',
	url: 'https://github.com/ZS/powergrid/',
	cols: ['minmax(max-content,1fr)', '1fr', '100px', '100vw'],
	rows: ['minmax(max-content,1fr)', 'minmax(max-content,1fr)', 'minmax(max-content,1fr)'],
	align: 'center',
	justify: 'end',
	cells: [
		{
			text: '1231231231'
		},
		{
		},
		{
		},
		{
		},
		{
			col: 1,
			colSpan: 4
		},
		{
			align: 'center',
			justify: 'end'
		},
		{
			row: 2,
			rowSpan: 2,
			order: 1
		},
		{
		},
		{
		},
		{
		},
		{
		},
		{
		}
	],
	prefix: 'grid',
};

describe('powergrid', function () {
	it('can position grid cells', function () {
		expect(typeof powergrid.gridCell).toBe('function');
		var props = powergrid.gridCell(1);
		expect(props.gridColumnStart).toBe(1);
		expect(props['-ms-grid-column']).toBe(1);
		//TODO: add more cases
	});

	it('can explicitly place grid cells', function () {
		expect(typeof powergrid.gridCells).toBe('function');
		var array = powergrid.gridCells(config.cols, config.rows, config.prefix);
	})

	it('can define grid lines', function () {
		expect(typeof powergrid.grid).toBe('function');
		var rule = powergrid.grid(['1fr'], ['2fr'], config.prefix);
		expect(rule['.' + config.prefix + 'grid']).toBeTruthy();
		var props = rule['.' + config.prefix + 'grid'];
		expect(props.display).toBe('grid');
		expect(props['display__']).toBe('-ms-grid');
		expect(props.gridTemplateColumns).toBe('1fr');
		expect(props['-ms-grid-columns']).toBe('1fr');
		expect(props.gridTemplateRows).toBe('2fr');
		expect(props['-ms-grid-rows']).toBe('2fr');
	});

	it('can align cells', function () {
		expect(typeof powergrid.cellAlign).toBe('function');
		var arr = powergrid.cellAlign(config.prefix);
		expect(arr.length).toBe(4); // start, end, center, stretch
		var css = powergrid.arrayToCss(arr);
		expect(css.indexOf(config.prefix+'justify-end')).toBeGreaterThanOrEqual(0);
		expect(css.indexOf('align-end')).toBeGreaterThanOrEqual(0);
		expect(css.indexOf('align-self-end')).toBeGreaterThanOrEqual(0);
		expect(css.indexOf('justify-self-end')).toBeGreaterThanOrEqual(0);
		
		expect(css.indexOf('justify-self-start')).toBeGreaterThanOrEqual(0);
		expect(css.indexOf('align-self-start')).toBeGreaterThanOrEqual(0);
		expect(css.indexOf('justify-start')).toBeGreaterThanOrEqual(0);
		expect(css.indexOf('align-start')).toBeGreaterThanOrEqual(0);

		expect(css.indexOf('justify-self-stretch')).toBeGreaterThanOrEqual(0);
		expect(css.indexOf('align-self-stretch')).toBeGreaterThanOrEqual(0);
		expect(css.indexOf('justify-stretch')).toBeGreaterThanOrEqual(0);
		expect(css.indexOf('align-stretch')).toBeGreaterThanOrEqual(0);

		expect(css.indexOf('justify-self-center')).toBeGreaterThanOrEqual(0);
		expect(css.indexOf('align-self-center')).toBeGreaterThanOrEqual(0);
		expect(css.indexOf('justify-center')).toBeGreaterThanOrEqual(0);
		expect(css.indexOf(config.prefix+'align-center')).toBeGreaterThanOrEqual(0);		
	});

	it('can auto place cells', function () {
		expect(typeof powergrid.gridAuto).toBe('function');
		var arr = powergrid.gridAuto(config.cols, config.rows, config.prefix);
		expect(arr.length).toBe(config.cols.length + config.rows.length);
		var css = powergrid.arrayToCss(arr);
		expect(css.indexOf('.' + config.prefix + 'grid')).toBeGreaterThanOrEqual(0);
		expect(css.indexOf(':nth-child(')).toBeGreaterThanOrEqual(0);
	});

	it('can generate css', function () {
		// There is no easy way to validate the CSS generated by the function. So we can check if it returns a string and the string has something like CSS ;). 
		expect(typeof powergrid.toCss).toBe('function');
		var css = powergrid.toCss(config);
		expect(typeof css).toBe('string');
		expect(css.indexOf('.' + config.prefix) > 0).toBeTruthy();
	});
});

describe('CSS helpers', function () {
	it('Can convert a plain js object to a CSS string', function () {
		expect(typeof powergrid.objToCss).toBe('function');
		var obj = { h1: { color: 'red' }, "h2,h3,h4": { "-ms-grid-column": 1 }, h5: { display: 'grid', display__: '-ms-grid' } };
		var css = powergrid.objToCss(obj);
		expect(typeof css).toBe('string');
		expect(css.indexOf('h1 {')).toBeGreaterThanOrEqual(0);
		expect(css.indexOf('h4 {')).toBeGreaterThanOrEqual(0);
		expect(css.indexOf('-ms-grid-column: 1')).toBeGreaterThanOrEqual(0);
		expect(css.indexOf('display: -ms-grid')).toBeGreaterThanOrEqual(0);
	});

	it('Can convert arrays of plain js object to a CSS string', function () {
		expect(typeof powergrid.arrayToCss).toBe('function');
		var arr = [{ h1: { color: 'red' } }, { "h2,h3,h4": { "-ms-grid-column": 1 } }, { h5: { display: 'grid', display__: '-ms-grid' } }];
		var css = powergrid.arrayToCss(arr);
		expect(css.indexOf('h1 {')).toBeGreaterThanOrEqual(0);
		expect(css.indexOf('h4 {')).toBeGreaterThanOrEqual(0);
		expect(css.indexOf('-ms-grid-column: 1')).toBeGreaterThanOrEqual(0);
		expect(css.indexOf('display: -ms-grid')).toBeGreaterThanOrEqual(0);
	});
})